/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timemanagementapp.gui;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import timemanagementapp.DAO.DAO;
import timemanagementapp.model.TaskLog;

/**
 *
 * @author utilizador
 */
public class PanelMainDashboard extends javax.swing.JPanel {

  private final DAO db = new DAO();
  /**
   * Creates new form PanelMainDashboard
   */
  public PanelMainDashboard() {
    initComponents();
    Date now = new Date();
    jLabel2.setText(new SimpleDateFormat("yyyy-MM-dd").format(now));
    try {
      int totalToday = db.getTotalTimeDate(now);
      double hoursToday = totalToday / 60.0;
      String timeText = String.format("%.2f", hoursToday);
      jLabel4.setText(timeText);
    }
    catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "An error has occured:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();

        jLabel1.setText("Date:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("jLabel2");

        jLabel3.setText("Total time today:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("jLabel4");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 204, 0)));

        jLabel5.setText("Times last 7 days:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel6.setText("hours");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)))))
                .addContainerGap(598, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(600, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

class TodayTasksTableModel extends AbstractTableModel {
    private List<TaskLog> tasks;
    private List<String[]> taskList;
    private String[] colTitles = new String[] { "Description", "Type", "Time", "Notes" };
    
    private void fillTaskList() {
        this.taskList = new ArrayList<String[]>();
        for (Iterator it=this.tasks.iterator(); it.hasNext(); ) {
            TaskLog task = (TaskLog) it.next();
            taskList.add(new String[] {task.getTask(), task.getType().getType(), task.getHoursTime(), task.getNotes()});
        }
    }
    
    public TodayTasksTableModel(List<TaskLog> tasks) {
        this.tasks = tasks;          
        fillTaskList();
    }
    
    public TodayTasksTableModel() {
        this.tasks = new ArrayList<TaskLog>();        
        fillTaskList();
    }
    
    public int getRowCount() {
        return tasks.size();
    }
  
    public int getColumnCount() {
        return colTitles.length;
    }
    
    @Override
    public String getColumnName(int columnIndex){
      return colTitles[columnIndex];
    }    
     
    @Override  
    public Class<?> getColumnClass(int columnIndex) {  
        return String.class;  
    }
    
    public void setValueAt(TaskLog aValue, int rowIndex) {  
        TaskLog task = tasks.get(rowIndex);
        String[] taskItem = taskList.get(rowIndex);
        
        try {
            task.setId(aValue.getId());
            task.setDate(aValue.getDate());
            task.setTask(aValue.getTask());
            task.setTime(aValue.getTime());
            task.setType(aValue.getType());
            task.setNotes(aValue.getNotes());
            
            taskItem[0] = task.getTask();
            taskItem[1] = task.getType().getType();
            taskItem[2] = task.getHoursTime();
            taskItem[3] = task.getNotes();

            fireTableCellUpdated(rowIndex, 0);  
            fireTableCellUpdated(rowIndex, 1);  
            fireTableCellUpdated(rowIndex, 2);  
            fireTableCellUpdated(rowIndex, 3);  
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "An error has occured:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }   
    }
    
    @Override  
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {  
        TaskLog task = tasks.get(rowIndex);
   
        switch (columnIndex) {
            case 0:  
                task.setLogin(aValue.toString());
            case 1:  
                usuario.setNome(aValue.toString());             
            case 2:  
                usuario.setSenha(aValue.toString());             

            default:  
                 System.err.println("Índice da coluna inválido");
     }  
     fireTableCellUpdated(rowIndex, columnIndex);  
     }      
}