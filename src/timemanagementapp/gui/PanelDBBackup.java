/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timemanagementapp.gui;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumnModel;
import org.apache.commons.io.FileUtils;
import timemanagementapp.util.DBLogs;

/**
 *
 * @author Ricardoc
 */
public class PanelDBBackup extends javax.swing.JPanel {

    
    /**
     * Creates new form PanelDBBackup
     */
    public PanelDBBackup() {
        initComponents();  
        this.setListBackupsTableColumns();
    }
    
    private void setListBackupsTableColumns() {
        TableColumnModel colModel = tableListBackups.getColumnModel();
        colModel.getColumn(1).setPreferredWidth(200);    
        colModel.getColumn(1).setMaxWidth(200);
    }
    
    private ListBackupsTableModel getLogs() {
        ListBackupsTableModel model = new ListBackupsTableModel();
        try {
            DBLogs logs = new DBLogs();
            List<String[]> logList = logs.getLogs();
            if (logList.size()>0) {
                Collections.sort(logList, new Comparator<String[]>() {
                    @Override
                    public int compare(String[] lhs, String[] rhs) {
                        // -1 - less than, 1 - greater than, 0 - equal, all inversed for descending
                        if (lhs[1].compareTo(rhs[1])<0) return 1;
                        if (lhs[1].compareTo(rhs[1])>0) return -1;
                        return 0;
                        //return lhs.customInt > rhs.customInt ? -1 : (lhs.customInt < rhs.customInt) ? 1 : 0;
                    }
                });
                model = new ListBackupsTableModel(logList);                
            }
        } catch (Exception ex) {
          JOptionPane.showMessageDialog(null, "An error has occured:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return model;
    }
    
    private void copyFileToBackup(File backupFile) throws Exception {
        File dbFile = new File("times.db");        
        FileUtils.copyFile(dbFile, backupFile);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListBackups = new javax.swing.JTable();

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/timemanagementapp/gui/images/icons8-save-50.png"))); // NOI18N
        jButton1.setText("Create a Backup Now ...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Backup List");

        tableListBackups.setModel(getLogs());
        jScrollPane1.setViewportView(tableListBackups);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            final JFileChooser fc = new JFileChooser(".");
            String aux = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
            String filename = "./dbBackup_" + aux + ".db";
            File defFile = new File(filename);
            fc.setSelectedFile(defFile);
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                this.copyFileToBackup(file);
                DBLogs dbLog = new DBLogs();
                dbLog.addToLog(file.getAbsolutePath());
            }
            this.tableListBackups.setModel(getLogs());
            this.repaint();
            this.revalidate();  
        } catch (Exception ex) {
          JOptionPane.showMessageDialog(null, "An error has occured:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableListBackups;
    // End of variables declaration//GEN-END:variables
}

class ListBackupsTableModel extends AbstractTableModel {    
    private List<String[]> valuesList;
    private String[] colTitles = new String[] { "Path / Filename", "Date" };
    
    public ListBackupsTableModel(List<String[]> values) {
        this.valuesList = values;
    }
    
    public ListBackupsTableModel() {
        this.valuesList = new ArrayList<String[]>();
    }
    
    public int getRowCount() {
        return valuesList.size();
    }
  
    public int getColumnCount() {
        return colTitles.length;
    }
    
    @Override
    public String getColumnName(int columnIndex){
      return colTitles[columnIndex];
    }    
     
    @Override  
    public Class<?> getColumnClass(int columnIndex) {  
        return String.class;  
    }
    
    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
      String[] record = this.valuesList.get(rowIndex);
      return record[columnIndex];
    }
    
    public void setValueAt(String[] aValue, int rowIndex) {  
        String[] record = this.valuesList.get(rowIndex);
        
        try {            
            record[0] = aValue[0];
            record[1] = aValue[1];

            this.valuesList.set(rowIndex, record);
            fireTableCellUpdated(rowIndex, 0);  
            fireTableCellUpdated(rowIndex, 1);  
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "An error has occured:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }   
    }
    
    @Override  
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {  
        String[] record = this.valuesList.get(rowIndex);
        record[columnIndex] = (String) aValue;
        this.valuesList.set(rowIndex, record);
        fireTableCellUpdated(rowIndex, columnIndex);  
    }     
    
    public boolean isEditable(int rowIndex, int columnIndex) {
        return false;
    }
}
